- name: Temporal filter works on complex columns on LHS
  sql: |
    create table t1 (ts timestamp with time zone);
    select * from t1 where ts + interval '1 hour' > now();
  expected_outputs:
  - stream_plan
- name: Temporal filter works on complex columns on LHS (part 2)
  sql: |
    create table t1 (ts timestamp with time zone, time_to_live interval);
    select * from t1 where ts + time_to_live * 1.5 > now();
  expected_outputs:
  - stream_plan
- name: Temporal filter works on complex columns on LHS (part 2, flipped)
  sql: |
    create table t1 (ts timestamp with time zone, additional_time_to_live interval);
    select * from t1 where now() - interval '15 minutes' < ts + additional_time_to_live * 1.5;
  expected_outputs:
  - stream_plan
- name: Temporal filter fails without `now()` in lower bound
  sql: |-
    create table t1 (ts timestamp with time zone);
    select * from t1 where now() - interval '15 minutes' > ts;
  expected_outputs:
    - stream_error
- name: Temporal filter reorders now expressions correctly
  sql: |
    create table t1 (ts timestamp with time zone);
    select * from t1 where ts < now() - interval '1 hour' and ts >= now() - interval '2 hour';
  expected_outputs:
  - stream_plan
  - stream_dist_plan
- name: Temporal filter in on clause for inner join's left side
  sql: |
    create table t1 (a int, ta timestamp with time zone);
    create table t2 (b int, tb timestamp with time zone);
    select * from t1 join t2 on a = b AND ta < now() - interval '1 hour' and ta >= now() - interval '2 hour';
  expected_outputs:
  - stream_plan
- name: Temporal filter in on clause for left join's left side
  sql: |
    create table t1 (a int, ta timestamp with time zone);
    create table t2 (b int, tb timestamp with time zone);
    select * from t1 left join t2 on a = b AND ta < now() - interval '1 hour' and ta >= now() - interval '2 hour';
  expected_outputs:
  - stream_error
- name: Temporal filter in on clause for right join's left side
  sql: |
    create table t1 (a int, ta timestamp with time zone);
    create table t2 (b int, tb timestamp with time zone);
    select * from t1 right join t2 on a = b AND ta < now() - interval '1 hour' and ta >= now() - interval '2 hour';
  expected_outputs:
  - stream_plan
- name: Temporal filter in on clause for full join's left side
  sql: |
    create table t1 (a int, ta timestamp with time zone);
    create table t2 (b int, tb timestamp with time zone);
    select * from t1 full join t2 on a = b AND ta < now() - interval '1 hour' and ta >= now() - interval '2 hour';
  expected_outputs:
  - stream_error
- name: Temporal filter in on clause for left join's right side
  sql: |
    create table t1 (a int, ta timestamp with time zone);
    create table t2 (b int, tb timestamp with time zone);
    select * from t1 left join t2 on a = b AND tb < now() - interval '1 hour' and tb >= now() - interval '2 hour';
  expected_outputs:
  - stream_plan
- name: Temporal filter in on clause for right join's right side
  sql: |
    create table t1 (a int, ta timestamp with time zone);
    create table t2 (b int, tb timestamp with time zone);
    select * from t1 right join t2 on a = b AND tb < now() - interval '1 hour' and tb >= now() - interval '2 hour';
  expected_outputs:
  - stream_error
- name: Temporal filter after temporal join
  sql: |
    create table stream(id1 int, a1 int, b1 int, v1 timestamp with time zone) APPEND ONLY;
    create table version(id2 int, a2 int, b2 int, primary key (id2));
    select id1, a1, id2, v1 from stream left join version FOR SYSTEM_TIME AS OF PROCTIME() on id1 = id2 where v1 > now();
  expected_outputs:
  - stream_plan
